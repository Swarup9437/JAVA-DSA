public class Linkedlist {

    class Node {
        int data;
        Node next;
        Node (int x) {
            this.data = x;
            next = null;
            size++;
        }
    }
    Node head;
    int size;
    Linkedlist () {
        size = 0;
    }
    public static void main(String[] args) {
        Linkedlist ll = new Linkedlist();
        
        ll.addFirst(5);
        ll.addFirst(4);
        ll.addFirst(3);
        ll.addFirst(2);
        ll.addLast(6);                          
        ll.addLast(7);                         
        ll.addLast(8);
        ll.printList();
        System.out.println(ll.getSize());
        ll.removeFirst();
        ll.printList();
        System.out.println(ll.getSize());
        ll.removeLast();
        ll.printList();
        System.out.println(ll.getSize());                          
    }


    public void addFirst (int n) {
        Node newNode =  new Node(n);
        if (head == null){
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }
    public void addLast (int n) {
        Node newNode = new Node (n);
        if (head == null){
            head = newNode;
            return;
        }
        Node currNode = head;
        while (currNode.next != null) {
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }
    public void printList () {
        if (head == null) {
            System.out.print("List is");
        }
        Node currNode = head;
        while (currNode != null) {
            System.out.print(currNode.data+ "-->");
            currNode = currNode.next;
        }
        System.out.println("NULL");
    }
    public int getSize() {
        return size;
    }
    public void removeFirst() {
        if (head == null) {
            System.out.print("Nothing to remove");
        }
        size--;
        if (head.next == null) {
            head = null;
            return;
        }
        head = head.next;
    }

    public void removeLast() {
        if (head == null) {
            System.out.print("Nothing to remove");
        }
        size--;
        if (head.next == null) {
            head = null;
            return;
        }
        Node currNode = head;
        Node nextNode = currNode.next;
        while (nextNode.next != null) {
            currNode = nextNode;
            nextNode = nextNode.next;
        }
        currNode.next = null;
    }
}
